.cube-3d-body-wrapper {
  padding: 1rem;
  /* Define scroll timeline scopes at the level where scrollers and animated elements co-exist */
  timeline-scope: --cubeScrollerX, --cubeScrollerY;
  /* Ensure this wrapper itself doesn't cause unexpected overflow issues for its children like cube-viewer */
  overflow: visible; 
}

.cube-controls-container {
  max-width: 1200px;
  margin: 0 auto;
  display: grid;
  grid-gap: 1rem; 
  grid-template-rows: auto auto; /* Rows for scrollers, then viewer */
}

@media (min-width: 768px) { 
  .cube-controls-container {
    grid-template-columns: 1fr 1fr; /* Two columns for scrollers */
    grid-template-rows: auto;    /* Scrollers on one row */
  }
  .cube-viewer {
    grid-column: 1 / span 2; /* Viewer spans both columns, on the next "implicit" row */
    margin-top: 1rem; 
  }
}

.cube-scroller-card {
  background-color: #e0f7fa; 
  color: #004d40; 
  padding: 0.5rem;
  height: 6rem; 
  border: 1px solid #b2dfdb; 
  border-radius: 4px;
  text-transform: uppercase;
  overflow: hidden; /* Crucial: will be overridden by axis-specific overflow */
  scroll-snap-type: both mandatory; /* Snap on the active axis */
  font-size: 0.9em;
  display: flex; 
  align-items: center;
  justify-content: center;
}

.cube-scroller-card .scroll-content {
  display: flex;
  flex-wrap: nowrap;
  height: 100%; /* For vertical scrolling */
  width: 100%;  /* For horizontal scrolling */
}

.cube-scroller-card .scroll-content-item {
   flex-shrink: 0;
   width: 100%;
   height: 100%;
   scroll-snap-align: start;
   padding: 10px;
   display: flex;
   align-items: center;
   justify-content: center;
   text-align: center;
   box-sizing: border-box;
}

.scroll-x-container {
  scroll-timeline-axis: x;
  scroll-timeline-name: --cubeScrollerX;
  overflow-x: scroll;
  overflow-y: hidden;
}
.scroll-x-container .scroll-content {
  flex-direction: row;
  width: 400%; /* For 4 items in the demo */
}

.scroll-y-container {
  scroll-timeline-axis: y;
  scroll-timeline-name: --cubeScrollerY;
  overflow-y: scroll;
  overflow-x: hidden;
}
.scroll-y-container .scroll-content {
  flex-direction: column;
  height: 400%; /* For 4 items in the demo */
}

.cube-viewer {
  background: #ffffff; 
  border: 1px solid #e0e0e0; 
  border-radius: 4px;
  padding: 1rem;
  height: 45vh; 
  min-height: 350px; /* Minimum pixel height */
  position: relative;
  z-index: 1; 
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  overflow: hidden; /* To contain the #tridiv if it tries to overflow viewer */
}

@media (max-width: 767px) { 
  .cube-viewer {
    grid-column: 1 / span 1; 
    margin-top: 1rem;
    height: 40vh;
  }
}

#tridiv {
  perspective: 1000px; 
  position: absolute;
  top: 0; left: 0; right: 0; bottom: 0;
  width: 100%; height: 100%;
  font-size: 10px; /* !IMPORTANT for em units of cube: 1em = 10px */
  overflow: visible; /* Allow 3D elements to go outside bounds if needed */
}

.scene, .shape, .face, .face-wrapper {
  position: absolute;
  transform-style: preserve-3d;
}

.scene {
  width: 100%; 
  height: 100%;
  top: 50%; left: 50%;
  transform: translate(-50%, -50%) 
             rotateX(var(--cube-x-angle, -25deg))
             rotateY(var(--cube-y-angle, -25deg))
             scale(var(--cube-scale, 0.8)); 
  animation: rotateHorizontalCube linear, rotateVerticalCube linear; /* Apply both animations */
  animation-timeline: --cubeScrollerX, --cubeScrollerY; /* Link to respective timelines */
  transform-style: preserve-3d; /* Explicitly ensure preserve-3d on scene */
}

.shape { 
  top: 50%; left: 50%; 
  width: 0; height: 0; 
  transform-origin: 50% 50% 50%; 
}

.face, .face-wrapper {
  overflow: hidden;
  transform-origin: 0 0; 
  backface-visibility: hidden;
  box-sizing: border-box;
}

.face {
  background-size: 100% 100% !important;
  background-position: center;
  border: 1px solid #333;
  display: flex; 
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.5em; /* 15px if #tridiv font-size is 10px */
  font-weight: bold;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.7);
}

.photon-shader { 
  position: absolute; left: 0; top: 0; width: 100%; height: 100%;
  /* Example: background-color: rgba(255, 255, 255, 0.1); */
  /* For this demo, text is added directly to faces, so shader isn't strictly needed for visuals */
}

/* Generic Cuboid Styles - defines how faces are arranged */
/* These are somewhat conceptual as transforms on faces define actual appearance */
.cuboid .ft, .cuboid .bk { width: 100%; height: 100%; }
.cuboid .rt, .cuboid .lt { width: 100%; height: 100%; } 
.cuboid .tp, .cuboid .bm { width: 100%; height: 100%; } 


.demo-cube { /* This class is on the .shape element */
  width: 15em;  /* Cube logical width: 15em * 10px/em = 150px */
  height: 15em; /* Cube logical height */
  /* Centering margin for the shape itself within the scene's local 0,0 */
  margin-top: calc(-15em / 2);  
  margin-left: calc(-15em / 2); 
  transform-style: preserve-3d; /* Explicitly ensure preserve-3d on the cube shape */
}

.demo-cube .face { /* Common properties for all faces of this cube */
  width: 15em;  /* Actual face dimension */
  height: 15em; /* Actual face dimension */
  position: absolute; /* Faces are positioned absolutely within the .shape */
}

/* Position and color each face of the demo-cube */
/* For a proper cube, we need to first translate then rotate */
.demo-cube .ft { transform: translateZ(7.5em); background-color: rgba(229, 57, 53, 0.85); } /* Front - Red */
.demo-cube .bk { transform: translateZ(-7.5em) rotateY(180deg); background-color: rgba(67, 160, 71, 0.85); } /* Back - Green */
.demo-cube .rt { transform: translateX(7.5em) rotateY(90deg); background-color: rgba(25, 118, 210, 0.85); } /* Right - Blue */
.demo-cube .lt { transform: translateX(-7.5em) rotateY(-90deg); background-color: rgba(253, 216, 53, 0.85); } /* Left - Yellow */
.demo-cube .tp { transform: translateY(-7.5em) rotateX(90deg); background-color: rgba(123, 31, 162, 0.85); } /* Top - Purple */
.demo-cube .bm { transform: translateY(7.5em) rotateX(-90deg); background-color: rgba(255, 138, 101, 0.85); } /* Bottom - Orange */


/* CSS Custom Properties for rotation angles and scale */
@property --cube-x-angle { syntax: "<angle>"; inherits: false; initial-value: -25deg; }
@property --cube-y-angle { syntax: "<angle>"; inherits: false; initial-value: -25deg; }
@property --cube-scale { syntax: "<number>"; inherits: false; initial-value: 0.8; }


@keyframes rotateHorizontalCube {
  from { --cube-y-angle: -25deg; } /* Start from initial Y */
  to   { --cube-y-angle: calc(-25deg + 360deg); } /* Full rotation relative to start */
}

@keyframes rotateVerticalCube {
  from { --cube-x-angle: -25deg; } /* Start from initial X */
  to   { --cube-x-angle: calc(-25deg + 360deg); } /* Full rotation relative to start */
} 